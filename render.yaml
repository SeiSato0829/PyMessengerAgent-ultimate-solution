services:
  - type: web
    name: pymessenger-agent-pro
    env: node
    plan: starter  # $7/month - 推奨
    # plan: standard  # $25/month - 高負荷対応
    # plan: pro  # $85/month - エンタープライズ
    
    region: oregon
    buildCommand: |
      echo "🚀 Starting enterprise build..."
      npm ci
      npm run lint:strict
      npm run build
      echo "✅ Build completed successfully"
      
    startCommand: npm start
    
    # プロプランなら無制限ビルド時間
    # 高性能CPU・メモリでフルビルド可能
    
    healthCheckPath: /api/health
    
    envVars:
      # アプリケーション設定
      - key: NODE_ENV
        value: production
        
      - key: NODE_OPTIONS
        value: --max-old-space-size=1800  # プロプランの豊富メモリ活用
        
      # Supabase設定（本格運用）
      - key: NEXT_PUBLIC_SUPABASE_URL
        sync: false  # 手動設定
        
      - key: NEXT_PUBLIC_SUPABASE_ANON_KEY
        sync: false
        
      - key: SUPABASE_SERVICE_KEY
        sync: false
        
      # セキュリティ設定
      - key: JWT_SECRET
        generateValue: true
        
      - key: ENCRYPTION_KEY
        generateValue: true
        
      - key: API_SECRET_KEY
        generateValue: true
        
      # Facebook API設定
      - key: FACEBOOK_APP_ID
        sync: false
        
      - key: FACEBOOK_APP_SECRET
        sync: false
        
      # データベース設定（PostgreSQL Pro）
      - key: DATABASE_URL
        sync: false
        
      # 監視・ログ設定
      - key: LOG_LEVEL
        value: info
        
      - key: SENTRY_DSN
        sync: false
        
      # パフォーマンス設定
      - key: ENABLE_ANALYTICS
        value: "true"
        
      - key: ENABLE_REAL_TIME
        value: "true"
        
      - key: CACHE_TTL
        value: "3600"

# PostgreSQL Pro データベース        
databases:
  - name: pymessenger-db-pro
    databaseName: pymessenger_pro
    user: pymessenger_admin
    plan: starter  # $7/month PostgreSQL
    # plan: standard  # $20/month - より高性能
    region: oregon

# 追加サービス（プロプランなら利用可能）
# Redis（キャッシング・セッション管理）
# - type: redis
#   name: pymessenger-cache
#   plan: starter
#   maxmemoryPolicy: allkeys-lru

# Cron Jobs（定期実行タスク）
# - type: cron
#   name: daily-cleanup
#   schedule: "0 2 * * *"  # 毎日午前2時
#   buildCommand: npm ci --only=production
#   startCommand: npm run cleanup